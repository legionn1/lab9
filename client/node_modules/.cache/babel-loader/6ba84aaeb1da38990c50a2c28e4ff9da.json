{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\\\u0423\\u0447\\u0451\\u0431\\u0430\\\\\\u0421\\u0435\\u0440\\u0432\\u0435\\u0440\\u043D\\u044B\\u0435\\\\lab9\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\\\u0423\\u0447\\u0451\\u0431\\u0430\\\\\\u0421\\u0435\\u0440\\u0432\\u0435\\u0440\\u043D\\u044B\\u0435\\\\lab9\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  extend type Query {\\n    isLoggedIn: Boolean!\\n    cartItems: [ID!]!\\n  }\\n\\n  extend type Launch {\\n    isInCart: Boolean!\\n  }\\n\\n  extend type Mutation {\\n    addOrRemoveFromCart(id: ID!): [ID!]!\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { GET_CART_ITEMS } from './pages/cart';\nexport var typeDefs = gql(_templateObject());\nexport var resolvers = {\n  Launch: {\n    isInCart: function isInCart(launch, _, _ref) {\n      var cache = _ref.cache;\n      var queryResult = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n\n      if (queryResult) {\n        return queryResult.cartItems.includes(launch.id);\n      }\n\n      return false;\n    }\n  },\n  Mutation: {\n    addOrRemoveFromCart: function addOrRemoveFromCart(_, _ref2, _ref3) {\n      var id = _ref2.id;\n      var cache = _ref3.cache;\n      var queryResult = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n\n      if (queryResult) {\n        var cartItems = queryResult.cartItems;\n        var data = {\n          cartItems: cartItems.includes(id) ? cartItems.filter(function (i) {\n            return i !== id;\n          }) : [].concat(_toConsumableArray(cartItems), [id])\n        };\n        cache.writeQuery({\n          query: GET_CART_ITEMS,\n          data: data\n        });\n        return data.cartItems;\n      }\n\n      return [];\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Учёба/Серверные/lab9/client/src/resolvers.tsx"],"names":["gql","GET_CART_ITEMS","typeDefs","resolvers","Launch","isInCart","launch","_","cache","queryResult","readQuery","query","cartItems","includes","id","Mutation","addOrRemoveFromCart","data","filter","i","writeQuery"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAKA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAO,IAAMC,QAAQ,GAAGF,GAAH,mBAAd;AA8BL,OAAO,IAAMG,SAAuB,GAAG;AACrCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,kBAACC,MAAD,EAAqCC,CAArC,QAA+D;AAAA,UAArBC,KAAqB,QAArBA,KAAqB;AACvE,UAAMC,WAAW,GAAGD,KAAK,CAACE,SAAN,CAA+C;AACjEC,QAAAA,KAAK,EAAEV;AAD0D,OAA/C,CAApB;;AAGA,UAAIQ,WAAJ,EAAiB;AACf,eAAOA,WAAW,CAACG,SAAZ,CAAsBC,QAAtB,CAA+BP,MAAM,CAACQ,EAAtC,CAAP;AACD;;AACD,aAAO,KAAP;AACD;AATK,GAD6B;AAYrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,mBAAmB,EAAE,6BAACT,CAAD,gBAAoD;AAAA,UAA9CO,EAA8C,SAA9CA,EAA8C;AAAA,UAAtBN,KAAsB,SAAtBA,KAAsB;AACvE,UAAMC,WAAW,GAAGD,KAAK,CACtBE,SADiB,CAC6B;AAC7CC,QAAAA,KAAK,EAAEV;AADsC,OAD7B,CAApB;;AAIA,UAAIQ,WAAJ,EAAiB;AAAA,YACPG,SADO,GACOH,WADP,CACPG,SADO;AAEf,YAAMK,IAAI,GAAG;AACXL,UAAAA,SAAS,EAAEA,SAAS,CAACC,QAAV,CAAmBC,EAAnB,IACPF,SAAS,CAACM,MAAV,CAAiB,UAACC,CAAD;AAAA,mBAAOA,CAAC,KAAKL,EAAb;AAAA,WAAjB,CADO,gCAEHF,SAFG,IAEQE,EAFR;AADA,SAAb;AAKAN,QAAAA,KAAK,CAACY,UAAN,CAAiB;AAAET,UAAAA,KAAK,EAAEV,cAAT;AAAyBgB,UAAAA,IAAI,EAAJA;AAAzB,SAAjB;AACA,eAAOA,IAAI,CAACL,SAAZ;AACD;;AACD,aAAO,EAAP;AACD;AAjBK;AAZ2B,CAAhC","sourcesContent":["import gql from 'graphql-tag';\r\nimport { ApolloCache } from 'apollo-cache';\r\nimport * as GetCartItemTypes from './pages/__generated__/GetCartItems';\r\nimport * as LaunchTileTypes from './pages/__generated__/LaunchTile';\r\nimport { Resolvers } from 'apollo-client'\r\nimport { GET_CART_ITEMS } from './pages/cart';\r\nexport const typeDefs = gql`\r\n  extend type Query {\r\n    isLoggedIn: Boolean!\r\n    cartItems: [ID!]!\r\n  }\r\n\r\n  extend type Launch {\r\n    isInCart: Boolean!\r\n  }\r\n\r\n  extend type Mutation {\r\n    addOrRemoveFromCart(id: ID!): [ID!]!\r\n  }\r\n`;\r\n\r\ntype ResolverFn = (\r\n  parent: any, \r\n  args: any, \r\n  { cache } : { cache: ApolloCache<any> }\r\n) => any;\r\n\r\ninterface ResolverMap {\r\n  [field: string]: ResolverFn;\r\n}\r\n\r\ninterface AppResolvers extends Resolvers {\r\n    Launch: ResolverMap;\r\n    Mutation: ResolverMap;\r\n  }\r\n\r\n  export const resolvers: AppResolvers = {\r\n    Launch: {\r\n      isInCart: (launch: LaunchTileTypes.LaunchTile, _, { cache }): boolean => {\r\n        const queryResult = cache.readQuery<GetCartItemTypes.GetCartItems>({ \r\n          query: GET_CART_ITEMS \r\n        });\r\n        if (queryResult) {\r\n          return queryResult.cartItems.includes(launch.id)\r\n        } \r\n        return false;\r\n      }\r\n    },\r\n    Mutation: {\r\n        addOrRemoveFromCart: (_, { id }: { id: string }, { cache }): string[] => {\r\n          const queryResult = cache\r\n            .readQuery<GetCartItemTypes.GetCartItems, any>({ \r\n              query: GET_CART_ITEMS \r\n            });\r\n          if (queryResult) {\r\n            const { cartItems } = queryResult;\r\n            const data = {\r\n              cartItems: cartItems.includes(id)\r\n                ? cartItems.filter((i) => i !== id)\r\n                : [...cartItems, id],\r\n            };\r\n            cache.writeQuery({ query: GET_CART_ITEMS, data });\r\n            return data.cartItems;\r\n          }\r\n          return [];\r\n        },\r\n      },\r\n  };"]},"metadata":{},"sourceType":"module"}