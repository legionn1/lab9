{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\\\u0423\\u0447\\u0451\\u0431\\u0430\\\\\\u0421\\u0435\\u0440\\u0432\\u0435\\u0440\\u043D\\u044B\\u0435\\\\lab9\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\\\u0423\\u0447\\u0451\\u0431\\u0430\\\\\\u0421\\u0435\\u0440\\u0432\\u0435\\u0440\\u043D\\u044B\\u0435\\\\lab9\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\\\u0423\\u0447\\u0451\\u0431\\u0430\\\\\\u0421\\u0435\\u0440\\u0432\\u0435\\u0440\\u043D\\u044B\\u0435\\\\lab9\\\\client\\\\src\\\\containers\\\\book-trips.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation BookTrips($launchIds: [ID]!) {\\n    bookTrips(launchIds: $launchIds) {\\n      success\\n      message\\n      launches {\\n        id\\n        isBooked\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react'; // preserve-line\n\nimport { useMutation } from '@apollo/react-hooks'; // preserve-line\n\nimport gql from 'graphql-tag';\nimport Button from '../components/button'; // preserve-line\n\nimport { GET_LAUNCH } from './cart-item'; // preserve-line\n\nexport var BOOK_TRIPS = gql(_templateObject());\n\nvar BookTrips = function BookTrips(_ref) {\n  var cartItems = _ref.cartItems;\n\n  var _useMutation = useMutation(BOOK_TRIPS, {\n    variables: {\n      launchIds: cartItems\n    },\n    refetchQueries: cartItems.map(function (launchId) {\n      return {\n        query: GET_LAUNCH,\n        variables: {\n          launchId: launchId\n        }\n      };\n    }),\n    update: function update(cache) {\n      cache.writeData({\n        data: {\n          cartItems: []\n        }\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      bookTrips = _useMutation2[0],\n      data = _useMutation2[1].data;\n\n  return data && data.bookTrips && !data.bookTrips.success ? /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, data.bookTrips.message) : /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      return bookTrips();\n    },\n    \"data-testid\": \"book-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"Book All\");\n};\n\nexport default BookTrips;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Учёба/Серверные/lab9/client/src/containers/book-trips.tsx"],"names":["React","useMutation","gql","Button","GET_LAUNCH","BOOK_TRIPS","BookTrips","cartItems","variables","launchIds","refetchQueries","map","launchId","query","update","cache","writeData","data","bookTrips","success","message"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA2B;;AAC3B,SAASC,WAAT,QAA4B,qBAA5B,C,CAAmD;;AACnD,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB,C,CAA2C;;AAC3C,SAASC,UAAT,QAA2B,aAA3B,C,CAA0C;;AAI1C,OAAO,IAAMC,UAAU,GAAGH,GAAH,mBAAhB;;AAeP,IAAMI,SAAmC,GAAG,SAAtCA,SAAsC,OAAmB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,qBAGzDN,WAAW,CAIbI,UAJa,EAKb;AACEG,IAAAA,SAAS,EAAE;AAAEC,MAAAA,SAAS,EAAEF;AAAb,KADb;AAEEG,IAAAA,cAAc,EAAEH,SAAS,CAACI,GAAV,CAAc,UAAAC,QAAQ;AAAA,aAAK;AACzCC,QAAAA,KAAK,EAAET,UADkC;AAEzCI,QAAAA,SAAS,EAAE;AAAEI,UAAAA,QAAQ,EAARA;AAAF;AAF8B,OAAL;AAAA,KAAtB,CAFlB;AAMEE,IAAAA,MANF,kBAMSC,KANT,EAMgB;AACZA,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,IAAI,EAAE;AAAEV,UAAAA,SAAS,EAAE;AAAb;AAAR,OAAhB;AACD;AARH,GALa,CAH8C;AAAA;AAAA,MAE3DW,SAF2D;AAAA,MAE9CD,IAF8C,oBAE9CA,IAF8C;;AAoB7D,SAAOA,IAAI,IAAIA,IAAI,CAACC,SAAb,IAA0B,CAACD,IAAI,CAACC,SAAL,CAAeC,OAA1C,gBACH;AAAG,mBAAY,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BF,IAAI,CAACC,SAAL,CAAeE,OAAzC,CADG,gBAGH,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE;AAAA,aAAMF,SAAS,EAAf;AAAA,KADX;AAEE,mBAAY,aAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AASD,CA7BD;;AA+BA,eAAeZ,SAAf","sourcesContent":["import React from 'react'; // preserve-line\nimport { useMutation } from '@apollo/react-hooks'; // preserve-line\nimport gql from 'graphql-tag';\n\nimport Button from '../components/button'; // preserve-line\nimport { GET_LAUNCH } from './cart-item'; // preserve-line\nimport * as GetCartItemsTypes from '../pages/__generated__/GetCartItems';\nimport * as BookTripsTypes from './__generated__/BookTrips';\n\nexport const BOOK_TRIPS = gql`\n  mutation BookTrips($launchIds: [ID]!) {\n    bookTrips(launchIds: $launchIds) {\n      success\n      message\n      launches {\n        id\n        isBooked\n      }\n    }\n  }\n`;\n\ninterface BookTripsProps extends GetCartItemsTypes.GetCartItems {}\n\nconst BookTrips: React.FC<BookTripsProps> = ({ cartItems }) => {\n  const [\n    bookTrips, { data }\n  ] = useMutation<\n    BookTripsTypes.BookTrips, \n    BookTripsTypes.BookTripsVariables\n  > (\n    BOOK_TRIPS,\n    {\n      variables: { launchIds: cartItems },\n      refetchQueries: cartItems.map(launchId => ({\n        query: GET_LAUNCH,\n        variables: { launchId },\n      })),\n      update(cache) {\n        cache.writeData({ data: { cartItems: [] } });\n      }\n    }\n  );\n\n  return data && data.bookTrips && !data.bookTrips.success\n    ? <p data-testid=\"message\">{data.bookTrips.message}</p>\n    : (\n      <Button \n        onClick={() => bookTrips()} \n        data-testid=\"book-button\">\n        Book All\n      </Button>\n    );\n}\n\nexport default BookTrips;"]},"metadata":{},"sourceType":"module"}